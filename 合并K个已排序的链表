/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
import java.util.*;
import java.util.ArrayList;
public class Solution {
    public ListNode mergeKLists(ArrayList<ListNode> lists) {
    if(lists==null || lists.size() < 1) return null;
    if(lists.size()==1) return lists.get(0);
    if(lists.size()%2!=0) lists.add(null);
        ArrayList<ListNode> sum = new ArrayList<>();
        for(int i=0;i<lists.size();i+=2)
        {
            sum.add(mergeTwoLists(lists.get(i),lists.get(i+1)));
        }
        return mergeKLists(sum);

}
        public ListNode mergeTwoLists (ListNode l1, ListNode l2) {
        
        ListNode l3=new ListNode(0);
        ListNode l4=l3;
        while(l1!=null&&l2!=null){
            if(l1.val<l2.val){
               l3.next=l1; 
               l1=l1.next; 
            }else{
               l3.next=l2; 
               l2=l2.next; 
            }
                l3=l3.next;
        }
        l3.next=(l1==null)?l2:l1;
        return l4.next;
        // write code here
    }
}
