class Solution {
   int MOD = (int)1e9+7;
    int m, n, max;
    int[][] dirs = new int[][]{{1,0},{-1,0},{0,1},{0,-1}};
    int[][][] memo;
    public int findPaths(int m, int n, int maxMove, int r, int c) {
        this.m = m;
        this.n = n;
        this.max = maxMove;
        //  it means that when the ball go the pos x,y with k times,
        //  it have memo[x][y][k] amount go out of boundary
        this.memo = new int[m][n][maxMove+1];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < maxMove + 1; k++) {
                    memo[i][j][k] = -1;
                }
            }
        }
        return dfs(r,c,max);
    }

    private int dfs(int x, int y, int t) {
        //    if out of the boundary
        if (x < 0 || x >= m || y < 0 || y >= n) return 1;
        //     if use up the steps
        if (t == 0) return 0;
        //      if this step has been recorded, it mean that dfs reached here before    return directly
        if (memo[x][y][t] != -1) return memo[x][y][t];
        int ans = 0;
        for (int[] dir : dirs) {
            int nx = x + dir[0];
            int ny = y + dir[1];
            ans += dfs(nx,ny,t-1);
            ans %= MOD;
        }
        memo[x][y][t] = ans;
        return ans;
    }
}
