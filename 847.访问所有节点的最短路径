class Solution {
    public int shortestPathLength(int[][] graph) {
        int n=graph.length;
        int mask=1<<n;
        int[][] dp=new int[mask][n];
        Queue<int[]> q=new LinkedList<>();
        for(int i=0;i<mask;i++) Arrays.fill(dp[i],0x3f3f3f3f);
        for(int i=0;i<n;i++){
            dp[1<<i][i]=0;
            q.offer(new int[]{1<<i,i});
        }
        while(!q.isEmpty()){
            int[] cur=q.poll();
            if(cur[0]==mask-1) return dp[cur[0]][cur[1]];
            for(int z:graph[cur[1]]){
                int a=cur[0]|(1<<z);
                if(dp[a][z]==0x3f3f3f3f){
                    dp[a][z]=dp[cur[0]][cur[1]]+1;
                    q.offer(new int[]{a,z});
                }
            }
        }
        return -1;
    }
}
