import java.util.*;


public class Solution {
    /**
     * 
     * @param A int整型一维数组 
     * @param target int整型 
     * @return int整型
     */
    public int search (int[] A, int target) {
        // write code here
        int len = A.length;
        if (len == 0)
            return -1;
        if (len == 1)
            return A[0] == target ? 0 : -1;
        int index = rotate_index(A);
        if (A[index] == target)
            return index;
        if (index == 0)
            return binary_search(A, target, 0, len-1);
        if (target < A[0])
            return binary_search(A, target, index, len-1);
        return binary_search(A, target, 0, index);
    }
    public int rotate_index (int[] A) {
        int left = 0, right = A.length - 1;
        if (A[left] < A[right])
            return 0;
        while (left <= right) {
            int mid = (left + right)/2;
            if (A[mid] > A[mid+1])
                return mid+1;
            else if (A[mid] < A[left]) 
                right = mid - 1;
            else
                left = mid + 1;
        }
        return 0;
    }
    public int binary_search(int[] A, int target, int left, int right) {
        while (left <= right) {
            int mid = (left + right)/2;
            if (A[mid] == target) {
                return mid;
            }
            else if (A[mid] < target) {
                left = mid + 1;
            }
            else {
                right = mid - 1;
            }
        }
        return -1;
    }
}
